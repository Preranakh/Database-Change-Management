--truncate your existing tables

truncate table enrollment;
truncate table student;
truncate table section;
truncate table course;
truncate table school;

----Create the new tables in order.  
--------------------------------------------------------
--  DDL for Table GRADE
--------------------------------------------------------

  CREATE TABLE "GRADE" 
   (	"SCHOOL_ID" NUMBER(8,0), 
	"STUDENT_ID" NUMBER(8,0), 
	"SECTION_ID" NUMBER(8,0), 
	"GRADE_TYPE_CODE" CHAR(2 BYTE), 
	"GRADE_CODE_OCCURRENCE" NUMBER(3,0), 
	"NUMERIC_GRADE" NUMBER(5,2), 
	"COMMENTS" CLOB, 
	"CREATED_BY" VARCHAR2(30 BYTE), 
	"CREATED_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(30 BYTE), 
	"MODIFIED_DATE" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table GRADE_CONVERSION
--------------------------------------------------------

  CREATE TABLE "GRADE_CONVERSION" 
   (	"SCHOOL_ID" NUMBER(8,0), 
	"LETTER_GRADE" VARCHAR2(2 BYTE), 
	"GRADE_POINT" NUMBER(3,2), 
	"MAX_GRADE" NUMBER(3,0), 
	"MIN_GRADE" NUMBER(3,0), 
	"CREATED_BY" VARCHAR2(30 BYTE), 
	"CREATED_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(30 BYTE), 
	"MODIFIED_DATE" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table GRADE_TYPE
--------------------------------------------------------

  CREATE TABLE "GRADE_TYPE" 
   (	"SCHOOL_ID" NUMBER(8,0), 
	"GRADE_TYPE_CODE" CHAR(2 BYTE), 
	"DESCRIPTION" VARCHAR2(50 BYTE), 
	"CREATED_BY" VARCHAR2(30 BYTE), 
	"CREATED_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(30 BYTE), 
	"MODIFIED_DATE" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table GRADE_TYPE_WEIGHT
--------------------------------------------------------

  CREATE TABLE "GRADE_TYPE_WEIGHT" 
   (	"SCHOOL_ID" NUMBER(8,0), 
	"SECTION_ID" NUMBER(8,0), 
	"GRADE_TYPE_CODE" CHAR(2 BYTE), 
	"NUMBER_PER_SECTION" NUMBER(3,0), 
	"PERCENT_OF_FINAL_GRADE" NUMBER(3,0), 
	"DROP_LOWEST" NUMBER(1,0), 
	"CREATED_BY" VARCHAR2(30 BYTE), 
	"CREATED_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(30 BYTE), 
	"MODIFIED_DATE" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table INSTRUCTOR
--------------------------------------------------------

  CREATE TABLE "INSTRUCTOR" 
   (	"SCHOOL_ID" NUMBER(8,0), 
	"INSTRUCTOR_ID" NUMBER(8,0), 
	"SALUTATION" VARCHAR2(5 BYTE), 
	"FIRST_NAME" VARCHAR2(25 BYTE), 
	"LAST_NAME" VARCHAR2(25 BYTE), 
	"STREET_ADDRESS" VARCHAR2(50 BYTE), 
	"ZIP" VARCHAR2(5 BYTE), 
	"PHONE" VARCHAR2(15 BYTE), 
	"CREATED_BY" VARCHAR2(30 BYTE), 
	"CREATED_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(30 BYTE), 
	"MODIFIED_DATE" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table ZIPCODE
--------------------------------------------------------

  CREATE TABLE "ZIPCODE" 
   (	"ZIP" VARCHAR2(5 BYTE), 
	"CITY" VARCHAR2(25 BYTE), 
	"STATE" CHAR(2 BYTE), 
	"CREATED_BY" VARCHAR2(30 BYTE), 
	"CREATED_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_DATE" DATE
   ) ;

   ---------------
   --MAIN NOT NULL CONSTRAINTS FOR TABLES
   --------------------------------------------------------
--  Constraints for Table GRADE
--------------------------------------------------------

  ALTER TABLE "GRADE" MODIFY ("MODIFIED_DATE" NOT NULL ENABLE);
  ALTER TABLE "GRADE" ADD CONSTRAINT "GRADE_PK" PRIMARY KEY ("SCHOOL_ID", "STUDENT_ID", "GRADE_TYPE_CODE", "SECTION_ID", "GRADE_CODE_OCCURRENCE")
  USING INDEX  ENABLE;
  ALTER TABLE "GRADE" MODIFY ("SCHOOL_ID" NOT NULL ENABLE);
  ALTER TABLE "GRADE" MODIFY ("STUDENT_ID" NOT NULL ENABLE);
  ALTER TABLE "GRADE" MODIFY ("SECTION_ID" NOT NULL ENABLE);
  ALTER TABLE "GRADE" MODIFY ("GRADE_TYPE_CODE" NOT NULL ENABLE);
  ALTER TABLE "GRADE" MODIFY ("GRADE_CODE_OCCURRENCE" NOT NULL ENABLE);
  ALTER TABLE "GRADE" MODIFY ("NUMERIC_GRADE" NOT NULL ENABLE);
  ALTER TABLE "GRADE" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "GRADE" MODIFY ("CREATED_DATE" NOT NULL ENABLE);
  ALTER TABLE "GRADE" MODIFY ("MODIFIED_BY" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table GRADE_CONVERSION
--------------------------------------------------------

  ALTER TABLE "GRADE_CONVERSION" MODIFY ("SCHOOL_ID" NOT NULL ENABLE);
  ALTER TABLE "GRADE_CONVERSION" MODIFY ("LETTER_GRADE" NOT NULL ENABLE);
  ALTER TABLE "GRADE_CONVERSION" MODIFY ("GRADE_POINT" NOT NULL ENABLE);
  ALTER TABLE "GRADE_CONVERSION" MODIFY ("MAX_GRADE" NOT NULL ENABLE);
  ALTER TABLE "GRADE_CONVERSION" MODIFY ("MIN_GRADE" NOT NULL ENABLE);
  ALTER TABLE "GRADE_CONVERSION" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "GRADE_CONVERSION" MODIFY ("CREATED_DATE" NOT NULL ENABLE);
  ALTER TABLE "GRADE_CONVERSION" MODIFY ("MODIFIED_BY" NOT NULL ENABLE);
  ALTER TABLE "GRADE_CONVERSION" MODIFY ("MODIFIED_DATE" NOT NULL ENABLE);
  ALTER TABLE "GRADE_CONVERSION" ADD CONSTRAINT "GRADE_CONVERSION_PK" PRIMARY KEY ("SCHOOL_ID", "LETTER_GRADE")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table GRADE_TYPE
--------------------------------------------------------

  ALTER TABLE "GRADE_TYPE" MODIFY ("SCHOOL_ID" NOT NULL ENABLE);
  ALTER TABLE "GRADE_TYPE" MODIFY ("GRADE_TYPE_CODE" NOT NULL ENABLE);
  ALTER TABLE "GRADE_TYPE" MODIFY ("DESCRIPTION" NOT NULL ENABLE);
  ALTER TABLE "GRADE_TYPE" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "GRADE_TYPE" MODIFY ("CREATED_DATE" NOT NULL ENABLE);
  ALTER TABLE "GRADE_TYPE" MODIFY ("MODIFIED_BY" NOT NULL ENABLE);
  ALTER TABLE "GRADE_TYPE" MODIFY ("MODIFIED_DATE" NOT NULL ENABLE);
  ALTER TABLE "GRADE_TYPE" ADD CONSTRAINT "GRADE_TYPE_PK" PRIMARY KEY ("SCHOOL_ID", "GRADE_TYPE_CODE")
  USING INDEX (CREATE UNIQUE INDEX "TABLE1_PK" ON "GRADE_TYPE" ("SCHOOL_ID", "GRADE_TYPE_CODE") 
  )  ENABLE;
--------------------------------------------------------
--  Constraints for Table GRADE_TYPE_WEIGHT
--------------------------------------------------------

  ALTER TABLE "GRADE_TYPE_WEIGHT" MODIFY ("SCHOOL_ID" NOT NULL ENABLE);
  ALTER TABLE "GRADE_TYPE_WEIGHT" MODIFY ("SECTION_ID" NOT NULL ENABLE);
  ALTER TABLE "GRADE_TYPE_WEIGHT" MODIFY ("GRADE_TYPE_CODE" NOT NULL ENABLE);
  ALTER TABLE "GRADE_TYPE_WEIGHT" ADD CONSTRAINT "GRADE_TYPE_WEIGHT_PK" PRIMARY KEY ("SCHOOL_ID", "SECTION_ID", "GRADE_TYPE_CODE")
  USING INDEX  ENABLE;
  ALTER TABLE "GRADE_TYPE_WEIGHT" MODIFY ("NUMBER_PER_SECTION" NOT NULL ENABLE);
  ALTER TABLE "GRADE_TYPE_WEIGHT" MODIFY ("PERCENT_OF_FINAL_GRADE" NOT NULL ENABLE);
  ALTER TABLE "GRADE_TYPE_WEIGHT" MODIFY ("DROP_LOWEST" NOT NULL ENABLE);
  ALTER TABLE "GRADE_TYPE_WEIGHT" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "GRADE_TYPE_WEIGHT" MODIFY ("CREATED_DATE" NOT NULL ENABLE);
  ALTER TABLE "GRADE_TYPE_WEIGHT" MODIFY ("MODIFIED_BY" NOT NULL ENABLE);
  ALTER TABLE "GRADE_TYPE_WEIGHT" MODIFY ("MODIFIED_DATE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table INSTRUCTOR
--------------------------------------------------------

  ALTER TABLE "INSTRUCTOR" MODIFY ("SCHOOL_ID" NOT NULL ENABLE);
  ALTER TABLE "INSTRUCTOR" MODIFY ("INSTRUCTOR_ID" NOT NULL ENABLE);
  ALTER TABLE "INSTRUCTOR" MODIFY ("FIRST_NAME" NOT NULL ENABLE);
  ALTER TABLE "INSTRUCTOR" MODIFY ("LAST_NAME" NOT NULL ENABLE);
  ALTER TABLE "INSTRUCTOR" MODIFY ("STREET_ADDRESS" NOT NULL ENABLE);
  ALTER TABLE "INSTRUCTOR" MODIFY ("ZIP" NOT NULL ENABLE);
  ALTER TABLE "INSTRUCTOR" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "INSTRUCTOR" MODIFY ("CREATED_DATE" NOT NULL ENABLE);
  ALTER TABLE "INSTRUCTOR" MODIFY ("MODIFIED_BY" NOT NULL ENABLE);
  ALTER TABLE "INSTRUCTOR" MODIFY ("MODIFIED_DATE" NOT NULL ENABLE);
  ALTER TABLE "INSTRUCTOR" ADD CONSTRAINT "INSTRUCTOR_PK" PRIMARY KEY ("INSTRUCTOR_ID", "SCHOOL_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table ZIPCODE
--------------------------------------------------------

  ALTER TABLE "ZIPCODE" MODIFY ("ZIP" NOT NULL ENABLE);
  ALTER TABLE "ZIPCODE" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "ZIPCODE" MODIFY ("CREATED_DATE" NOT NULL ENABLE);
  ALTER TABLE "ZIPCODE" MODIFY ("MODIFIED_BY" NOT NULL ENABLE);
  ALTER TABLE "ZIPCODE" MODIFY ("MODIFIED_DATE" NOT NULL ENABLE);
  ALTER TABLE "ZIPCODE" ADD CONSTRAINT "ZIPCODE_PK" PRIMARY KEY ("ZIP")
  USING INDEX  ENABLE;
--------------------------------------------------------

--FKS FOR NEW TABLES
--------------------------------------------------------
--  Ref Constraints for Table GRADE
--------------------------------------------------------

  ALTER TABLE "GRADE" ADD CONSTRAINT "GRADE_FK3" FOREIGN KEY ("SCHOOL_ID", "SECTION_ID", "GRADE_TYPE_CODE")
	  REFERENCES "GRADE_TYPE_WEIGHT" ("SCHOOL_ID", "SECTION_ID", "GRADE_TYPE_CODE") DEFERRABLE INITIALLY DEFERRED ENABLE;
  ALTER TABLE "GRADE" ADD CONSTRAINT "GRADE_FK1" FOREIGN KEY ("SCHOOL_ID")
	  REFERENCES "SCHOOL" ("SCHOOL_ID") DEFERRABLE INITIALLY DEFERRED ENABLE;
  ALTER TABLE "GRADE" ADD CONSTRAINT "GRADE_FK2" FOREIGN KEY ("SECTION_ID", "STUDENT_ID", "SCHOOL_ID")
	  REFERENCES "ENROLLMENT" ("SECTION_ID", "STUDENT_ID", "SCHOOL_ID") DEFERRABLE INITIALLY DEFERRED ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table GRADE_CONVERSION
--------------------------------------------------------

  ALTER TABLE "GRADE_CONVERSION" ADD CONSTRAINT "GRADE_CONVERSION_FK1" FOREIGN KEY ("SCHOOL_ID")
	  REFERENCES "SCHOOL" ("SCHOOL_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table GRADE_TYPE
--------------------------------------------------------

  ALTER TABLE "GRADE_TYPE" ADD CONSTRAINT "GRADE_TYPE_FK1" FOREIGN KEY ("SCHOOL_ID")
	  REFERENCES "SCHOOL" ("SCHOOL_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table GRADE_TYPE_WEIGHT
--------------------------------------------------------

  ALTER TABLE "GRADE_TYPE_WEIGHT" ADD CONSTRAINT "GRADE_TYPE_WEIGHT_FK1" FOREIGN KEY ("SCHOOL_ID")
	  REFERENCES "SCHOOL" ("SCHOOL_ID") ENABLE;
  ALTER TABLE "GRADE_TYPE_WEIGHT" ADD CONSTRAINT "GRADE_TYPE_WEIGHT_FK2" FOREIGN KEY ("SCHOOL_ID", "GRADE_TYPE_CODE")
	  REFERENCES "GRADE_TYPE" ("SCHOOL_ID", "GRADE_TYPE_CODE") ENABLE;
  ALTER TABLE "GRADE_TYPE_WEIGHT" ADD CONSTRAINT "GRADE_TYPE_WEIGHT_FK3" FOREIGN KEY ("SECTION_ID", "SCHOOL_ID")
	  REFERENCES "SECTION" ("SECTION_ID", "SCHOOL_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table INSTRUCTOR
--------------------------------------------------------

  ALTER TABLE "INSTRUCTOR" ADD CONSTRAINT "INSTRUCTOR_FK1" FOREIGN KEY ("SCHOOL_ID")
	  REFERENCES "SCHOOL" ("SCHOOL_ID") ENABLE;
  ALTER TABLE "INSTRUCTOR" ADD CONSTRAINT "INSTRUCTOR_FK2" FOREIGN KEY ("ZIP")
	  REFERENCES "ZIPCODE" ("ZIP") ENABLE;
----------------------------------------------------------
--Set the appropriate FKs FOR OLD TABLES.  Make sure if there’s an adjustment to an existing PS2/PS3 table, you 
--catch it

ALTER TABLE SECTION
ADD CONSTRAINT SECTION_FK3 FOREIGN KEY
(
  INSTRUCTOR_ID 
, SCHOOL_ID 
)
REFERENCES INSTRUCTOR
(
  INSTRUCTOR_ID 
, SCHOOL_ID 
)
ENABLE;
--Create the pacakges

--  DDL for Package PKG_COURSE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PKG_COURSE" 
is

type COURSE_tapi_rec is record (
CREATED_BY  COURSE.CREATED_BY%type
,PREREQUISITE_SCHOOL_ID  COURSE.PREREQUISITE_SCHOOL_ID%type
,COURSE_NO  COURSE.COURSE_NO%type
,COST  COURSE.COST%type
,MODIFIED_BY  COURSE.MODIFIED_BY%type
,DESCRIPTION  COURSE.DESCRIPTION%type
,CREATED_DATE  COURSE.CREATED_DATE%type
,PREREQUISITE  COURSE.PREREQUISITE%type
,SCHOOL_ID  COURSE.SCHOOL_ID%type
,MODIFIED_DATE  COURSE.MODIFIED_DATE%type
);
type COURSE_tapi_tab is table of COURSE_tapi_rec;

-- insert
procedure ins (
p_CREATED_BY in COURSE.CREATED_BY%type
,p_PREREQUISITE_SCHOOL_ID in COURSE.PREREQUISITE_SCHOOL_ID%type default null 
,p_COURSE_NO in COURSE.COURSE_NO%type
,p_COST in COURSE.COST%type default null 
,p_MODIFIED_BY in COURSE.MODIFIED_BY%type
,p_DESCRIPTION in COURSE.DESCRIPTION%type
,p_CREATED_DATE in COURSE.CREATED_DATE%type
,p_PREREQUISITE in COURSE.PREREQUISITE%type default null 
,p_SCHOOL_ID in COURSE.SCHOOL_ID%type
,p_MODIFIED_DATE in COURSE.MODIFIED_DATE%type
);
-- update
procedure upd (
p_CREATED_BY in COURSE.CREATED_BY%type
,p_PREREQUISITE_SCHOOL_ID in COURSE.PREREQUISITE_SCHOOL_ID%type default null 
,p_COURSE_NO in COURSE.COURSE_NO%type
,p_COST in COURSE.COST%type default null 
,p_MODIFIED_BY in COURSE.MODIFIED_BY%type
,p_DESCRIPTION in COURSE.DESCRIPTION%type
,p_CREATED_DATE in COURSE.CREATED_DATE%type
,p_PREREQUISITE in COURSE.PREREQUISITE%type default null 
,p_SCHOOL_ID in COURSE.SCHOOL_ID%type
,p_MODIFIED_DATE in COURSE.MODIFIED_DATE%type
);
-- delete
procedure del (
p_COURSE_NO in COURSE.COURSE_NO%type
,p_SCHOOL_ID in COURSE.SCHOOL_ID%type
);
end pkg_course;


/
--------------------------------------------------------
--  DDL for Package PKG_ENROLLMENT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PKG_ENROLLMENT" 
is

type ENROLLMENT_tapi_rec is record (
CREATED_BY  ENROLLMENT.CREATED_BY%type
,MODIFIED_BY  ENROLLMENT.MODIFIED_BY%type
,CREATED_DATE  ENROLLMENT.CREATED_DATE%type
,ENROLL_DATE  ENROLLMENT.ENROLL_DATE%type
,FINAL_GRADE  ENROLLMENT.FINAL_GRADE%type
,SCHOOL_ID  ENROLLMENT.SCHOOL_ID%type
,SECTION_ID  ENROLLMENT.SECTION_ID%type
,MODIFIED_DATE  ENROLLMENT.MODIFIED_DATE%type
,STUDENT_ID  ENROLLMENT.STUDENT_ID%type
);
type ENROLLMENT_tapi_tab is table of ENROLLMENT_tapi_rec;

-- insert
procedure ins (
p_CREATED_BY in ENROLLMENT.CREATED_BY%type
,p_MODIFIED_BY in ENROLLMENT.MODIFIED_BY%type
,p_CREATED_DATE in ENROLLMENT.CREATED_DATE%type
,p_ENROLL_DATE in ENROLLMENT.ENROLL_DATE%type
,p_FINAL_GRADE in ENROLLMENT.FINAL_GRADE%type default null 
,p_SCHOOL_ID in ENROLLMENT.SCHOOL_ID%type
,p_SECTION_ID in ENROLLMENT.SECTION_ID%type
,p_MODIFIED_DATE in ENROLLMENT.MODIFIED_DATE%type
,p_STUDENT_ID in ENROLLMENT.STUDENT_ID%type
);
-- update
procedure upd (
p_CREATED_BY in ENROLLMENT.CREATED_BY%type
,p_MODIFIED_BY in ENROLLMENT.MODIFIED_BY%type
,p_CREATED_DATE in ENROLLMENT.CREATED_DATE%type
,p_ENROLL_DATE in ENROLLMENT.ENROLL_DATE%type
,p_FINAL_GRADE in ENROLLMENT.FINAL_GRADE%type default null 
,p_SCHOOL_ID in ENROLLMENT.SCHOOL_ID%type
,p_SECTION_ID in ENROLLMENT.SECTION_ID%type
,p_MODIFIED_DATE in ENROLLMENT.MODIFIED_DATE%type
,p_STUDENT_ID in ENROLLMENT.STUDENT_ID%type
);
-- delete
procedure del (
p_SECTION_ID in ENROLLMENT.SECTION_ID%type
,p_STUDENT_ID in ENROLLMENT.STUDENT_ID%type
,p_SCHOOL_ID in ENROLLMENT.SCHOOL_ID%type
);
end pkg_enrollment;


/
--------------------------------------------------------
--  DDL for Package PKG_GRADE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PKG_GRADE" 
is

type GRADE_tapi_rec is record (
CREATED_BY  GRADE.CREATED_BY%type
,MODIFIED_BY  GRADE.MODIFIED_BY%type
,CREATED_DATE  GRADE.CREATED_DATE%type
,COMMENTS  GRADE.COMMENTS%type
,GRADE_CODE_OCCURRENCE  GRADE.GRADE_CODE_OCCURRENCE%type
,SCHOOL_ID  GRADE.SCHOOL_ID%type
,GRADE_TYPE_CODE  GRADE.GRADE_TYPE_CODE%type
,SECTION_ID  GRADE.SECTION_ID%type
,NUMERIC_GRADE  GRADE.NUMERIC_GRADE%type
,MODIFIED_DATE  GRADE.MODIFIED_DATE%type
,STUDENT_ID  GRADE.STUDENT_ID%type
);
type GRADE_tapi_tab is table of GRADE_tapi_rec;

-- insert
procedure ins (
p_CREATED_BY in GRADE.CREATED_BY%type
,p_MODIFIED_BY in GRADE.MODIFIED_BY%type
,p_CREATED_DATE in GRADE.CREATED_DATE%type
,p_COMMENTS in GRADE.COMMENTS%type default null 
,p_GRADE_CODE_OCCURRENCE in GRADE.GRADE_CODE_OCCURRENCE%type
,p_SCHOOL_ID in GRADE.SCHOOL_ID%type
,p_GRADE_TYPE_CODE in GRADE.GRADE_TYPE_CODE%type
,p_SECTION_ID in GRADE.SECTION_ID%type
,p_NUMERIC_GRADE in GRADE.NUMERIC_GRADE%type
,p_MODIFIED_DATE in GRADE.MODIFIED_DATE%type
,p_STUDENT_ID in GRADE.STUDENT_ID%type
);
-- update
procedure upd (
p_CREATED_BY in GRADE.CREATED_BY%type
,p_MODIFIED_BY in GRADE.MODIFIED_BY%type
,p_CREATED_DATE in GRADE.CREATED_DATE%type
,p_COMMENTS in GRADE.COMMENTS%type default null 
,p_GRADE_CODE_OCCURRENCE in GRADE.GRADE_CODE_OCCURRENCE%type
,p_SCHOOL_ID in GRADE.SCHOOL_ID%type
,p_GRADE_TYPE_CODE in GRADE.GRADE_TYPE_CODE%type
,p_SECTION_ID in GRADE.SECTION_ID%type
,p_NUMERIC_GRADE in GRADE.NUMERIC_GRADE%type
,p_MODIFIED_DATE in GRADE.MODIFIED_DATE%type
,p_STUDENT_ID in GRADE.STUDENT_ID%type
);
-- delete
procedure del (
p_SCHOOL_ID in GRADE.SCHOOL_ID%type
,p_STUDENT_ID in GRADE.STUDENT_ID%type
,p_GRADE_TYPE_CODE in GRADE.GRADE_TYPE_CODE%type
,p_SECTION_ID in GRADE.SECTION_ID%type
,p_GRADE_CODE_OCCURRENCE in GRADE.GRADE_CODE_OCCURRENCE%type
);
end pkg_grade;


/
--------------------------------------------------------
--  DDL for Package PKG_GRADE_CONVERSION
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PKG_GRADE_CONVERSION" 
is

type GRADE_CONVERSION_tapi_rec is record (
CREATED_BY  GRADE_CONVERSION.CREATED_BY%type
,GRADE_POINT  GRADE_CONVERSION.GRADE_POINT%type
,LETTER_GRADE  GRADE_CONVERSION.LETTER_GRADE%type
,MODIFIED_BY  GRADE_CONVERSION.MODIFIED_BY%type
,CREATED_DATE  GRADE_CONVERSION.CREATED_DATE%type
,MIN_GRADE  GRADE_CONVERSION.MIN_GRADE%type
,SCHOOL_ID  GRADE_CONVERSION.SCHOOL_ID%type
,MAX_GRADE  GRADE_CONVERSION.MAX_GRADE%type
,MODIFIED_DATE  GRADE_CONVERSION.MODIFIED_DATE%type
);
type GRADE_CONVERSION_tapi_tab is table of GRADE_CONVERSION_tapi_rec;

-- insert
procedure ins (
p_CREATED_BY in GRADE_CONVERSION.CREATED_BY%type
,p_GRADE_POINT in GRADE_CONVERSION.GRADE_POINT%type
,p_LETTER_GRADE in GRADE_CONVERSION.LETTER_GRADE%type
,p_MODIFIED_BY in GRADE_CONVERSION.MODIFIED_BY%type
,p_CREATED_DATE in GRADE_CONVERSION.CREATED_DATE%type
,p_MIN_GRADE in GRADE_CONVERSION.MIN_GRADE%type
,p_SCHOOL_ID in GRADE_CONVERSION.SCHOOL_ID%type
,p_MAX_GRADE in GRADE_CONVERSION.MAX_GRADE%type
,p_MODIFIED_DATE in GRADE_CONVERSION.MODIFIED_DATE%type
);
-- update
procedure upd (
p_CREATED_BY in GRADE_CONVERSION.CREATED_BY%type
,p_GRADE_POINT in GRADE_CONVERSION.GRADE_POINT%type
,p_LETTER_GRADE in GRADE_CONVERSION.LETTER_GRADE%type
,p_MODIFIED_BY in GRADE_CONVERSION.MODIFIED_BY%type
,p_CREATED_DATE in GRADE_CONVERSION.CREATED_DATE%type
,p_MIN_GRADE in GRADE_CONVERSION.MIN_GRADE%type
,p_SCHOOL_ID in GRADE_CONVERSION.SCHOOL_ID%type
,p_MAX_GRADE in GRADE_CONVERSION.MAX_GRADE%type
,p_MODIFIED_DATE in GRADE_CONVERSION.MODIFIED_DATE%type
);
-- delete
procedure del (
p_SCHOOL_ID in GRADE_CONVERSION.SCHOOL_ID%type
,p_LETTER_GRADE in GRADE_CONVERSION.LETTER_GRADE%type
);
end PKG_GRADE_CONVERSION;


/
--------------------------------------------------------
--  DDL for Package PKG_GRADE_TYPE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PKG_GRADE_TYPE" 
is

type GRADE_TYPE_tapi_rec is record (
CREATED_BY  GRADE_TYPE.CREATED_BY%type
,MODIFIED_BY  GRADE_TYPE.MODIFIED_BY%type
,DESCRIPTION  GRADE_TYPE.DESCRIPTION%type
,CREATED_DATE  GRADE_TYPE.CREATED_DATE%type
,SCHOOL_ID  GRADE_TYPE.SCHOOL_ID%type
,GRADE_TYPE_CODE  GRADE_TYPE.GRADE_TYPE_CODE%type
,MODIFIED_DATE  GRADE_TYPE.MODIFIED_DATE%type
);
type GRADE_TYPE_tapi_tab is table of GRADE_TYPE_tapi_rec;

-- insert
procedure ins (
p_CREATED_BY in GRADE_TYPE.CREATED_BY%type
,p_MODIFIED_BY in GRADE_TYPE.MODIFIED_BY%type
,p_DESCRIPTION in GRADE_TYPE.DESCRIPTION%type
,p_CREATED_DATE in GRADE_TYPE.CREATED_DATE%type
,p_SCHOOL_ID in GRADE_TYPE.SCHOOL_ID%type
,p_GRADE_TYPE_CODE in GRADE_TYPE.GRADE_TYPE_CODE%type
,p_MODIFIED_DATE in GRADE_TYPE.MODIFIED_DATE%type
);
-- update
procedure upd (
p_CREATED_BY in GRADE_TYPE.CREATED_BY%type
,p_MODIFIED_BY in GRADE_TYPE.MODIFIED_BY%type
,p_DESCRIPTION in GRADE_TYPE.DESCRIPTION%type
,p_CREATED_DATE in GRADE_TYPE.CREATED_DATE%type
,p_SCHOOL_ID in GRADE_TYPE.SCHOOL_ID%type
,p_GRADE_TYPE_CODE in GRADE_TYPE.GRADE_TYPE_CODE%type
,p_MODIFIED_DATE in GRADE_TYPE.MODIFIED_DATE%type
);
-- delete
procedure del (
p_SCHOOL_ID in GRADE_TYPE.SCHOOL_ID%type
,p_GRADE_TYPE_CODE in GRADE_TYPE.GRADE_TYPE_CODE%type
);
end PKG_GRADE_TYPE;


/
--------------------------------------------------------
--  DDL for Package PKG_GRADE_TYPE_WEIGHT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PKG_GRADE_TYPE_WEIGHT" 
is

type GRADE_TYPE_WEIGHT_tapi_rec is record (
CREATED_BY  GRADE_TYPE_WEIGHT.CREATED_BY%type
,MODIFIED_BY  GRADE_TYPE_WEIGHT.MODIFIED_BY%type
,CREATED_DATE  GRADE_TYPE_WEIGHT.CREATED_DATE%type
,PERCENT_OF_FINAL_GRADE  GRADE_TYPE_WEIGHT.PERCENT_OF_FINAL_GRADE%type
,DROP_LOWEST  GRADE_TYPE_WEIGHT.DROP_LOWEST%type
,SCHOOL_ID  GRADE_TYPE_WEIGHT.SCHOOL_ID%type
,GRADE_TYPE_CODE  GRADE_TYPE_WEIGHT.GRADE_TYPE_CODE%type
,NUMBER_PER_SECTION  GRADE_TYPE_WEIGHT.NUMBER_PER_SECTION%type
,SECTION_ID  GRADE_TYPE_WEIGHT.SECTION_ID%type
,MODIFIED_DATE  GRADE_TYPE_WEIGHT.MODIFIED_DATE%type
);
type GRADE_TYPE_WEIGHT_tapi_tab is table of GRADE_TYPE_WEIGHT_tapi_rec;

-- insert
procedure ins (
p_CREATED_BY in GRADE_TYPE_WEIGHT.CREATED_BY%type
,p_MODIFIED_BY in GRADE_TYPE_WEIGHT.MODIFIED_BY%type
,p_CREATED_DATE in GRADE_TYPE_WEIGHT.CREATED_DATE%type
,p_PERCENT_OF_FINAL_GRADE in GRADE_TYPE_WEIGHT.PERCENT_OF_FINAL_GRADE%type
,p_DROP_LOWEST in GRADE_TYPE_WEIGHT.DROP_LOWEST%type
,p_SCHOOL_ID in GRADE_TYPE_WEIGHT.SCHOOL_ID%type
,p_GRADE_TYPE_CODE in GRADE_TYPE_WEIGHT.GRADE_TYPE_CODE%type
,p_NUMBER_PER_SECTION in GRADE_TYPE_WEIGHT.NUMBER_PER_SECTION%type
,p_SECTION_ID in GRADE_TYPE_WEIGHT.SECTION_ID%type
,p_MODIFIED_DATE in GRADE_TYPE_WEIGHT.MODIFIED_DATE%type
);
-- update
procedure upd (
p_CREATED_BY in GRADE_TYPE_WEIGHT.CREATED_BY%type
,p_MODIFIED_BY in GRADE_TYPE_WEIGHT.MODIFIED_BY%type
,p_CREATED_DATE in GRADE_TYPE_WEIGHT.CREATED_DATE%type
,p_PERCENT_OF_FINAL_GRADE in GRADE_TYPE_WEIGHT.PERCENT_OF_FINAL_GRADE%type
,p_DROP_LOWEST in GRADE_TYPE_WEIGHT.DROP_LOWEST%type
,p_SCHOOL_ID in GRADE_TYPE_WEIGHT.SCHOOL_ID%type
,p_GRADE_TYPE_CODE in GRADE_TYPE_WEIGHT.GRADE_TYPE_CODE%type
,p_NUMBER_PER_SECTION in GRADE_TYPE_WEIGHT.NUMBER_PER_SECTION%type
,p_SECTION_ID in GRADE_TYPE_WEIGHT.SECTION_ID%type
,p_MODIFIED_DATE in GRADE_TYPE_WEIGHT.MODIFIED_DATE%type
);
-- delete
procedure del (
p_SCHOOL_ID in GRADE_TYPE_WEIGHT.SCHOOL_ID%type
,p_SECTION_ID in GRADE_TYPE_WEIGHT.SECTION_ID%type
,p_GRADE_TYPE_CODE in GRADE_TYPE_WEIGHT.GRADE_TYPE_CODE%type
);
end PKG_GRADE_TYPE_WEIGHT;


/
--------------------------------------------------------
--  DDL for Package PKG_INSTRUCTOR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PKG_INSTRUCTOR" 
is

type INSTRUCTOR_tapi_rec is record (
ZIP  INSTRUCTOR.ZIP%type
,CREATED_BY  INSTRUCTOR.CREATED_BY%type
,MODIFIED_BY  INSTRUCTOR.MODIFIED_BY%type
,SALUTATION  INSTRUCTOR.SALUTATION%type
,CREATED_DATE  INSTRUCTOR.CREATED_DATE%type
,PHONE  INSTRUCTOR.PHONE%type
,INSTRUCTOR_ID  INSTRUCTOR.INSTRUCTOR_ID%type
,LAST_NAME  INSTRUCTOR.LAST_NAME%type
,STREET_ADDRESS  INSTRUCTOR.STREET_ADDRESS%type
,SCHOOL_ID  INSTRUCTOR.SCHOOL_ID%type
,FIRST_NAME  INSTRUCTOR.FIRST_NAME%type
,MODIFIED_DATE  INSTRUCTOR.MODIFIED_DATE%type
);
type INSTRUCTOR_tapi_tab is table of INSTRUCTOR_tapi_rec;

-- insert
procedure ins (
p_ZIP in INSTRUCTOR.ZIP%type
,p_CREATED_BY in INSTRUCTOR.CREATED_BY%type
,p_MODIFIED_BY in INSTRUCTOR.MODIFIED_BY%type
,p_SALUTATION in INSTRUCTOR.SALUTATION%type default null 
,p_CREATED_DATE in INSTRUCTOR.CREATED_DATE%type
,p_PHONE in INSTRUCTOR.PHONE%type default null 
,p_INSTRUCTOR_ID in INSTRUCTOR.INSTRUCTOR_ID%type
,p_LAST_NAME in INSTRUCTOR.LAST_NAME%type
,p_STREET_ADDRESS in INSTRUCTOR.STREET_ADDRESS%type
,p_SCHOOL_ID in INSTRUCTOR.SCHOOL_ID%type
,p_FIRST_NAME in INSTRUCTOR.FIRST_NAME%type
,p_MODIFIED_DATE in INSTRUCTOR.MODIFIED_DATE%type
);
-- update
procedure upd (
p_ZIP in INSTRUCTOR.ZIP%type
,p_CREATED_BY in INSTRUCTOR.CREATED_BY%type
,p_MODIFIED_BY in INSTRUCTOR.MODIFIED_BY%type
,p_SALUTATION in INSTRUCTOR.SALUTATION%type default null 
,p_CREATED_DATE in INSTRUCTOR.CREATED_DATE%type
,p_PHONE in INSTRUCTOR.PHONE%type default null 
,p_INSTRUCTOR_ID in INSTRUCTOR.INSTRUCTOR_ID%type
,p_LAST_NAME in INSTRUCTOR.LAST_NAME%type
,p_STREET_ADDRESS in INSTRUCTOR.STREET_ADDRESS%type
,p_SCHOOL_ID in INSTRUCTOR.SCHOOL_ID%type
,p_FIRST_NAME in INSTRUCTOR.FIRST_NAME%type
,p_MODIFIED_DATE in INSTRUCTOR.MODIFIED_DATE%type
);
-- delete
procedure del (
p_INSTRUCTOR_ID in INSTRUCTOR.INSTRUCTOR_ID%type
,p_SCHOOL_ID in INSTRUCTOR.SCHOOL_ID%type
);
end PKG_INSTRUCTOR;


/
--------------------------------------------------------
--  DDL for Package PKG_SCHOOL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PKG_SCHOOL" 
is

type SCHOOL_tapi_rec is record (
SCHOOL_NAME  SCHOOL.SCHOOL_NAME%type
,CREATED_BY  SCHOOL.CREATED_BY%type
,MODIFIED_BY  SCHOOL.MODIFIED_BY%type
,CREATED_DATE  SCHOOL.CREATED_DATE%type
,SCHOOL_ID  SCHOOL.SCHOOL_ID%type
,MODIFIED_DATE  SCHOOL.MODIFIED_DATE%type
);
type SCHOOL_tapi_tab is table of SCHOOL_tapi_rec;

-- insert
procedure ins (
p_SCHOOL_NAME in SCHOOL.SCHOOL_NAME%type
,p_CREATED_BY in SCHOOL.CREATED_BY%type
,p_MODIFIED_BY in SCHOOL.MODIFIED_BY%type
,p_CREATED_DATE in SCHOOL.CREATED_DATE%type
,p_SCHOOL_ID in SCHOOL.SCHOOL_ID%type
,p_MODIFIED_DATE in SCHOOL.MODIFIED_DATE%type
);
-- update
procedure upd (
p_SCHOOL_NAME in SCHOOL.SCHOOL_NAME%type
,p_CREATED_BY in SCHOOL.CREATED_BY%type
,p_MODIFIED_BY in SCHOOL.MODIFIED_BY%type
,p_CREATED_DATE in SCHOOL.CREATED_DATE%type
,p_SCHOOL_ID in SCHOOL.SCHOOL_ID%type
,p_MODIFIED_DATE in SCHOOL.MODIFIED_DATE%type
);
-- delete
procedure del (
p_SCHOOL_ID in SCHOOL.SCHOOL_ID%type
);
end PKG_SCHOOL;


/
--------------------------------------------------------
--  DDL for Package PKG_SECTION
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PKG_SECTION" 
is

type SECTION_tapi_rec is record (
SECTION_NO  SECTION.SECTION_NO%type
,LOCATION  SECTION.LOCATION%type
,CREATED_BY  SECTION.CREATED_BY%type
,CAPACITY  SECTION.CAPACITY%type
,COURSE_NO  SECTION.COURSE_NO%type
,MODIFIED_BY  SECTION.MODIFIED_BY%type
,CREATED_DATE  SECTION.CREATED_DATE%type
,START_DATE_TIME  SECTION.START_DATE_TIME%type
,INSTRUCTOR_ID  SECTION.INSTRUCTOR_ID%type
,SCHOOL_ID  SECTION.SCHOOL_ID%type
,SECTION_ID  SECTION.SECTION_ID%type
,MODIFIED_DATE  SECTION.MODIFIED_DATE%type
);
type SECTION_tapi_tab is table of SECTION_tapi_rec;

-- insert
procedure ins (
p_SECTION_NO in SECTION.SECTION_NO%type
,p_LOCATION in SECTION.LOCATION%type default null 
,p_CREATED_BY in SECTION.CREATED_BY%type
,p_CAPACITY in SECTION.CAPACITY%type default null 
,p_COURSE_NO in SECTION.COURSE_NO%type
,p_MODIFIED_BY in SECTION.MODIFIED_BY%type
,p_CREATED_DATE in SECTION.CREATED_DATE%type
,p_START_DATE_TIME in SECTION.START_DATE_TIME%type default null 
,p_INSTRUCTOR_ID in SECTION.INSTRUCTOR_ID%type
,p_SCHOOL_ID in SECTION.SCHOOL_ID%type
,p_SECTION_ID in SECTION.SECTION_ID%type
,p_MODIFIED_DATE in SECTION.MODIFIED_DATE%type
);
-- update
procedure upd (
p_SECTION_NO in SECTION.SECTION_NO%type
,p_LOCATION in SECTION.LOCATION%type default null 
,p_CREATED_BY in SECTION.CREATED_BY%type
,p_CAPACITY in SECTION.CAPACITY%type default null 
,p_COURSE_NO in SECTION.COURSE_NO%type
,p_MODIFIED_BY in SECTION.MODIFIED_BY%type
,p_CREATED_DATE in SECTION.CREATED_DATE%type
,p_START_DATE_TIME in SECTION.START_DATE_TIME%type default null 
,p_INSTRUCTOR_ID in SECTION.INSTRUCTOR_ID%type
,p_SCHOOL_ID in SECTION.SCHOOL_ID%type
,p_SECTION_ID in SECTION.SECTION_ID%type
,p_MODIFIED_DATE in SECTION.MODIFIED_DATE%type
);
-- delete
procedure del (
p_SECTION_NO in SECTION.SECTION_NO%type
,p_COURSE_NO in SECTION.COURSE_NO%type
);
end PKG_SECTION;


/
--------------------------------------------------------
--  DDL for Package PKG_STUDENT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PKG_STUDENT" 
is

type STUDENT_tapi_rec is record (
ZIP  STUDENT.ZIP%type
,CREATED_BY  STUDENT.CREATED_BY%type
,MODIFIED_BY  STUDENT.MODIFIED_BY%type
,CREATED_DATE  STUDENT.CREATED_DATE%type
,PHONE  STUDENT.PHONE%type
,LAST_NAME  STUDENT.LAST_NAME%type
,SCHOOL_ID  STUDENT.SCHOOL_ID%type
,FIRST_NAME  STUDENT.FIRST_NAME%type
,MODIFIED_DATE  STUDENT.MODIFIED_DATE%type
,EMPLOYER  STUDENT.EMPLOYER%type
,SALUTATION  STUDENT.SALUTATION%type
,STREET_ADDRESS  STUDENT.STREET_ADDRESS%type
,REGISTRATION_DATE  STUDENT.REGISTRATION_DATE%type
,STUDENT_ID  STUDENT.STUDENT_ID%type
);
type STUDENT_tapi_tab is table of STUDENT_tapi_rec;

-- insert
procedure ins (
p_ZIP in STUDENT.ZIP%type
,p_CREATED_BY in STUDENT.CREATED_BY%type
,p_MODIFIED_BY in STUDENT.MODIFIED_BY%type
,p_CREATED_DATE in STUDENT.CREATED_DATE%type
,p_PHONE in STUDENT.PHONE%type default null 
,p_LAST_NAME in STUDENT.LAST_NAME%type
,p_SCHOOL_ID in STUDENT.SCHOOL_ID%type
,p_FIRST_NAME in STUDENT.FIRST_NAME%type default null 
,p_MODIFIED_DATE in STUDENT.MODIFIED_DATE%type
,p_EMPLOYER in STUDENT.EMPLOYER%type default null 
,p_SALUTATION in STUDENT.SALUTATION%type default null 
,p_STREET_ADDRESS in STUDENT.STREET_ADDRESS%type default null 
,p_REGISTRATION_DATE in STUDENT.REGISTRATION_DATE%type
,p_STUDENT_ID in STUDENT.STUDENT_ID%type
);
-- update
procedure upd (
p_ZIP in STUDENT.ZIP%type
,p_CREATED_BY in STUDENT.CREATED_BY%type
,p_MODIFIED_BY in STUDENT.MODIFIED_BY%type
,p_CREATED_DATE in STUDENT.CREATED_DATE%type
,p_PHONE in STUDENT.PHONE%type default null 
,p_LAST_NAME in STUDENT.LAST_NAME%type
,p_SCHOOL_ID in STUDENT.SCHOOL_ID%type
,p_FIRST_NAME in STUDENT.FIRST_NAME%type default null 
,p_MODIFIED_DATE in STUDENT.MODIFIED_DATE%type
,p_EMPLOYER in STUDENT.EMPLOYER%type default null 
,p_SALUTATION in STUDENT.SALUTATION%type default null 
,p_STREET_ADDRESS in STUDENT.STREET_ADDRESS%type default null 
,p_REGISTRATION_DATE in STUDENT.REGISTRATION_DATE%type
,p_STUDENT_ID in STUDENT.STUDENT_ID%type
);
-- delete
procedure del (
p_STUDENT_ID in STUDENT.STUDENT_ID%type
,p_SCHOOL_ID in STUDENT.SCHOOL_ID%type
);
end PKG_STUDENT;


/
--------------------------------------------------------
--  DDL for Package PKG_ZIPCODE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PKG_ZIPCODE" 
is

type ZIPCODE_tapi_rec is record (
ZIP  ZIPCODE.ZIP%type
,CREATED_BY  ZIPCODE.CREATED_BY%type
,CITY  ZIPCODE.CITY%type
,MODIFIED_BY  ZIPCODE.MODIFIED_BY%type
,CREATED_DATE  ZIPCODE.CREATED_DATE%type
,STATE  ZIPCODE.STATE%type
,MODIFIED_DATE  ZIPCODE.MODIFIED_DATE%type
);
type ZIPCODE_tapi_tab is table of ZIPCODE_tapi_rec;

-- insert
procedure ins (
p_ZIP in ZIPCODE.ZIP%type
,p_CREATED_BY in ZIPCODE.CREATED_BY%type
,p_CITY in ZIPCODE.CITY%type default null 
,p_MODIFIED_BY in ZIPCODE.MODIFIED_BY%type
,p_CREATED_DATE in ZIPCODE.CREATED_DATE%type
,p_STATE in ZIPCODE.STATE%type default null 
,p_MODIFIED_DATE in ZIPCODE.MODIFIED_DATE%type
);
-- update
procedure upd (
p_ZIP in ZIPCODE.ZIP%type
,p_CREATED_BY in ZIPCODE.CREATED_BY%type
,p_CITY in ZIPCODE.CITY%type default null 
,p_MODIFIED_BY in ZIPCODE.MODIFIED_BY%type
,p_CREATED_DATE in ZIPCODE.CREATED_DATE%type
,p_STATE in ZIPCODE.STATE%type default null 
,p_MODIFIED_DATE in ZIPCODE.MODIFIED_DATE%type
);
-- delete
procedure del (
p_ZIP in ZIPCODE.ZIP%type
);
end PKG_ZIPCODE;


/
--------------------------------------------------------
--  DDL for Package Body PKG_COURSE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PKG_COURSE" 
is
-- insert
procedure ins (
p_CREATED_BY in COURSE.CREATED_BY%type
,p_PREREQUISITE_SCHOOL_ID in COURSE.PREREQUISITE_SCHOOL_ID%type default null 
,p_COURSE_NO in COURSE.COURSE_NO%type
,p_COST in COURSE.COST%type default null 
,p_MODIFIED_BY in COURSE.MODIFIED_BY%type
,p_DESCRIPTION in COURSE.DESCRIPTION%type
,p_CREATED_DATE in COURSE.CREATED_DATE%type
,p_PREREQUISITE in COURSE.PREREQUISITE%type default null 
,p_SCHOOL_ID in COURSE.SCHOOL_ID%type
,p_MODIFIED_DATE in COURSE.MODIFIED_DATE%type
) is
begin
insert into COURSE(
CREATED_BY
,PREREQUISITE_SCHOOL_ID
,COURSE_NO
,COST
,MODIFIED_BY
,DESCRIPTION
,CREATED_DATE
,PREREQUISITE
,SCHOOL_ID
,MODIFIED_DATE
) values (
p_CREATED_BY
,p_PREREQUISITE_SCHOOL_ID
,p_COURSE_NO
,p_COST
,p_MODIFIED_BY
,p_DESCRIPTION
,p_CREATED_DATE
,p_PREREQUISITE
,p_SCHOOL_ID
,p_MODIFIED_DATE
);end;
-- update
procedure upd (
p_CREATED_BY in COURSE.CREATED_BY%type
,p_PREREQUISITE_SCHOOL_ID in COURSE.PREREQUISITE_SCHOOL_ID%type default null 
,p_COURSE_NO in COURSE.COURSE_NO%type
,p_COST in COURSE.COST%type default null 
,p_MODIFIED_BY in COURSE.MODIFIED_BY%type
,p_DESCRIPTION in COURSE.DESCRIPTION%type
,p_CREATED_DATE in COURSE.CREATED_DATE%type
,p_PREREQUISITE in COURSE.PREREQUISITE%type default null 
,p_SCHOOL_ID in COURSE.SCHOOL_ID%type
,p_MODIFIED_DATE in COURSE.MODIFIED_DATE%type
) is
begin
update COURSE set
CREATED_BY = p_CREATED_BY
,PREREQUISITE_SCHOOL_ID = p_PREREQUISITE_SCHOOL_ID
,COST = p_COST
,MODIFIED_BY = p_MODIFIED_BY
,DESCRIPTION = p_DESCRIPTION
,CREATED_DATE = p_CREATED_DATE
,PREREQUISITE = p_PREREQUISITE
,MODIFIED_DATE = p_MODIFIED_DATE
where COURSE_NO = p_COURSE_NO and SCHOOL_ID = p_SCHOOL_ID;
end;
-- del
procedure del (
p_COURSE_NO in COURSE.COURSE_NO%type
,p_SCHOOL_ID in COURSE.SCHOOL_ID%type
) is
begin
delete from COURSE
where COURSE_NO = p_COURSE_NO and SCHOOL_ID = p_SCHOOL_ID;
end;
end pkg_course;

/
--------------------------------------------------------
--  DDL for Package Body PKG_ENROLLMENT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PKG_ENROLLMENT" 
is
-- insert
procedure ins (
p_CREATED_BY in ENROLLMENT.CREATED_BY%type
,p_MODIFIED_BY in ENROLLMENT.MODIFIED_BY%type
,p_CREATED_DATE in ENROLLMENT.CREATED_DATE%type
,p_ENROLL_DATE in ENROLLMENT.ENROLL_DATE%type
,p_FINAL_GRADE in ENROLLMENT.FINAL_GRADE%type default null 
,p_SCHOOL_ID in ENROLLMENT.SCHOOL_ID%type
,p_SECTION_ID in ENROLLMENT.SECTION_ID%type
,p_MODIFIED_DATE in ENROLLMENT.MODIFIED_DATE%type
,p_STUDENT_ID in ENROLLMENT.STUDENT_ID%type
) is
begin
insert into ENROLLMENT(
CREATED_BY
,MODIFIED_BY
,CREATED_DATE
,ENROLL_DATE
,FINAL_GRADE
,SCHOOL_ID
,SECTION_ID
,MODIFIED_DATE
,STUDENT_ID
) values (
p_CREATED_BY
,p_MODIFIED_BY
,p_CREATED_DATE
,p_ENROLL_DATE
,p_FINAL_GRADE
,p_SCHOOL_ID
,p_SECTION_ID
,p_MODIFIED_DATE
,p_STUDENT_ID
);end;
-- update
procedure upd (
p_CREATED_BY in ENROLLMENT.CREATED_BY%type
,p_MODIFIED_BY in ENROLLMENT.MODIFIED_BY%type
,p_CREATED_DATE in ENROLLMENT.CREATED_DATE%type
,p_ENROLL_DATE in ENROLLMENT.ENROLL_DATE%type
,p_FINAL_GRADE in ENROLLMENT.FINAL_GRADE%type default null 
,p_SCHOOL_ID in ENROLLMENT.SCHOOL_ID%type
,p_SECTION_ID in ENROLLMENT.SECTION_ID%type
,p_MODIFIED_DATE in ENROLLMENT.MODIFIED_DATE%type
,p_STUDENT_ID in ENROLLMENT.STUDENT_ID%type
) is
begin
update ENROLLMENT set
CREATED_BY = p_CREATED_BY
,MODIFIED_BY = p_MODIFIED_BY
,CREATED_DATE = p_CREATED_DATE
,ENROLL_DATE = p_ENROLL_DATE
,FINAL_GRADE = p_FINAL_GRADE
,MODIFIED_DATE = p_MODIFIED_DATE
where SECTION_ID = p_SECTION_ID and STUDENT_ID = p_STUDENT_ID and SCHOOL_ID = p_SCHOOL_ID;
end;
-- del
procedure del (
p_SECTION_ID in ENROLLMENT.SECTION_ID%type
,p_STUDENT_ID in ENROLLMENT.STUDENT_ID%type
,p_SCHOOL_ID in ENROLLMENT.SCHOOL_ID%type
) is
begin
delete from ENROLLMENT
where SECTION_ID = p_SECTION_ID and STUDENT_ID = p_STUDENT_ID and SCHOOL_ID = p_SCHOOL_ID;
end;
end pkg_enrollment;

/
--------------------------------------------------------
--  DDL for Package Body PKG_GRADE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PKG_GRADE" 
is
-- insert
procedure ins (
p_CREATED_BY in GRADE.CREATED_BY%type
,p_MODIFIED_BY in GRADE.MODIFIED_BY%type
,p_CREATED_DATE in GRADE.CREATED_DATE%type
,p_COMMENTS in GRADE.COMMENTS%type default null 
,p_GRADE_CODE_OCCURRENCE in GRADE.GRADE_CODE_OCCURRENCE%type
,p_SCHOOL_ID in GRADE.SCHOOL_ID%type
,p_GRADE_TYPE_CODE in GRADE.GRADE_TYPE_CODE%type
,p_SECTION_ID in GRADE.SECTION_ID%type
,p_NUMERIC_GRADE in GRADE.NUMERIC_GRADE%type
,p_MODIFIED_DATE in GRADE.MODIFIED_DATE%type
,p_STUDENT_ID in GRADE.STUDENT_ID%type
) is
begin
insert into GRADE(
CREATED_BY
,MODIFIED_BY
,CREATED_DATE
,COMMENTS
,GRADE_CODE_OCCURRENCE
,SCHOOL_ID
,GRADE_TYPE_CODE
,SECTION_ID
,NUMERIC_GRADE
,MODIFIED_DATE
,STUDENT_ID
) values (
p_CREATED_BY
,p_MODIFIED_BY
,p_CREATED_DATE
,p_COMMENTS
,p_GRADE_CODE_OCCURRENCE
,p_SCHOOL_ID
,p_GRADE_TYPE_CODE
,p_SECTION_ID
,p_NUMERIC_GRADE
,p_MODIFIED_DATE
,p_STUDENT_ID
);end;
-- update
procedure upd (
p_CREATED_BY in GRADE.CREATED_BY%type
,p_MODIFIED_BY in GRADE.MODIFIED_BY%type
,p_CREATED_DATE in GRADE.CREATED_DATE%type
,p_COMMENTS in GRADE.COMMENTS%type default null 
,p_GRADE_CODE_OCCURRENCE in GRADE.GRADE_CODE_OCCURRENCE%type
,p_SCHOOL_ID in GRADE.SCHOOL_ID%type
,p_GRADE_TYPE_CODE in GRADE.GRADE_TYPE_CODE%type
,p_SECTION_ID in GRADE.SECTION_ID%type
,p_NUMERIC_GRADE in GRADE.NUMERIC_GRADE%type
,p_MODIFIED_DATE in GRADE.MODIFIED_DATE%type
,p_STUDENT_ID in GRADE.STUDENT_ID%type
) is
begin
update GRADE set
CREATED_BY = p_CREATED_BY
,MODIFIED_BY = p_MODIFIED_BY
,CREATED_DATE = p_CREATED_DATE
,COMMENTS = p_COMMENTS
,NUMERIC_GRADE = p_NUMERIC_GRADE
,MODIFIED_DATE = p_MODIFIED_DATE
where SCHOOL_ID = p_SCHOOL_ID and STUDENT_ID = p_STUDENT_ID and GRADE_TYPE_CODE = p_GRADE_TYPE_CODE and SECTION_ID = p_SECTION_ID and GRADE_CODE_OCCURRENCE = p_GRADE_CODE_OCCURRENCE;
end;
-- del
procedure del (
p_SCHOOL_ID in GRADE.SCHOOL_ID%type
,p_STUDENT_ID in GRADE.STUDENT_ID%type
,p_GRADE_TYPE_CODE in GRADE.GRADE_TYPE_CODE%type
,p_SECTION_ID in GRADE.SECTION_ID%type
,p_GRADE_CODE_OCCURRENCE in GRADE.GRADE_CODE_OCCURRENCE%type
) is
begin
delete from GRADE
where SCHOOL_ID = p_SCHOOL_ID and STUDENT_ID = p_STUDENT_ID and GRADE_TYPE_CODE = p_GRADE_TYPE_CODE and SECTION_ID = p_SECTION_ID and GRADE_CODE_OCCURRENCE = p_GRADE_CODE_OCCURRENCE;
end;
end pkg_grade;

/
--------------------------------------------------------
--  DDL for Package Body PKG_GRADE_CONVERSION
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PKG_GRADE_CONVERSION" 
is
-- insert
procedure ins (
p_CREATED_BY in GRADE_CONVERSION.CREATED_BY%type
,p_GRADE_POINT in GRADE_CONVERSION.GRADE_POINT%type
,p_LETTER_GRADE in GRADE_CONVERSION.LETTER_GRADE%type
,p_MODIFIED_BY in GRADE_CONVERSION.MODIFIED_BY%type
,p_CREATED_DATE in GRADE_CONVERSION.CREATED_DATE%type
,p_MIN_GRADE in GRADE_CONVERSION.MIN_GRADE%type
,p_SCHOOL_ID in GRADE_CONVERSION.SCHOOL_ID%type
,p_MAX_GRADE in GRADE_CONVERSION.MAX_GRADE%type
,p_MODIFIED_DATE in GRADE_CONVERSION.MODIFIED_DATE%type
) is
begin
insert into GRADE_CONVERSION(
CREATED_BY
,GRADE_POINT
,LETTER_GRADE
,MODIFIED_BY
,CREATED_DATE
,MIN_GRADE
,SCHOOL_ID
,MAX_GRADE
,MODIFIED_DATE
) values (
p_CREATED_BY
,p_GRADE_POINT
,p_LETTER_GRADE
,p_MODIFIED_BY
,p_CREATED_DATE
,p_MIN_GRADE
,p_SCHOOL_ID
,p_MAX_GRADE
,p_MODIFIED_DATE
);end;
-- update
procedure upd (
p_CREATED_BY in GRADE_CONVERSION.CREATED_BY%type
,p_GRADE_POINT in GRADE_CONVERSION.GRADE_POINT%type
,p_LETTER_GRADE in GRADE_CONVERSION.LETTER_GRADE%type
,p_MODIFIED_BY in GRADE_CONVERSION.MODIFIED_BY%type
,p_CREATED_DATE in GRADE_CONVERSION.CREATED_DATE%type
,p_MIN_GRADE in GRADE_CONVERSION.MIN_GRADE%type
,p_SCHOOL_ID in GRADE_CONVERSION.SCHOOL_ID%type
,p_MAX_GRADE in GRADE_CONVERSION.MAX_GRADE%type
,p_MODIFIED_DATE in GRADE_CONVERSION.MODIFIED_DATE%type
) is
begin
update GRADE_CONVERSION set
CREATED_BY = p_CREATED_BY
,GRADE_POINT = p_GRADE_POINT
,MODIFIED_BY = p_MODIFIED_BY
,CREATED_DATE = p_CREATED_DATE
,MIN_GRADE = p_MIN_GRADE
,MAX_GRADE = p_MAX_GRADE
,MODIFIED_DATE = p_MODIFIED_DATE
where SCHOOL_ID = p_SCHOOL_ID and LETTER_GRADE = p_LETTER_GRADE;
end;
-- del
procedure del (
p_SCHOOL_ID in GRADE_CONVERSION.SCHOOL_ID%type
,p_LETTER_GRADE in GRADE_CONVERSION.LETTER_GRADE%type
) is
begin
delete from GRADE_CONVERSION
where SCHOOL_ID = p_SCHOOL_ID and LETTER_GRADE = p_LETTER_GRADE;
end;
end PKG_GRADE_CONVERSION;

/
--------------------------------------------------------
--  DDL for Package Body PKG_GRADE_TYPE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PKG_GRADE_TYPE" 
is
-- insert
procedure ins (
p_CREATED_BY in GRADE_TYPE.CREATED_BY%type
,p_MODIFIED_BY in GRADE_TYPE.MODIFIED_BY%type
,p_DESCRIPTION in GRADE_TYPE.DESCRIPTION%type
,p_CREATED_DATE in GRADE_TYPE.CREATED_DATE%type
,p_SCHOOL_ID in GRADE_TYPE.SCHOOL_ID%type
,p_GRADE_TYPE_CODE in GRADE_TYPE.GRADE_TYPE_CODE%type
,p_MODIFIED_DATE in GRADE_TYPE.MODIFIED_DATE%type
) is
begin
insert into GRADE_TYPE(
CREATED_BY
,MODIFIED_BY
,DESCRIPTION
,CREATED_DATE
,SCHOOL_ID
,GRADE_TYPE_CODE
,MODIFIED_DATE
) values (
p_CREATED_BY
,p_MODIFIED_BY
,p_DESCRIPTION
,p_CREATED_DATE
,p_SCHOOL_ID
,p_GRADE_TYPE_CODE
,p_MODIFIED_DATE
);end;
-- update
procedure upd (
p_CREATED_BY in GRADE_TYPE.CREATED_BY%type
,p_MODIFIED_BY in GRADE_TYPE.MODIFIED_BY%type
,p_DESCRIPTION in GRADE_TYPE.DESCRIPTION%type
,p_CREATED_DATE in GRADE_TYPE.CREATED_DATE%type
,p_SCHOOL_ID in GRADE_TYPE.SCHOOL_ID%type
,p_GRADE_TYPE_CODE in GRADE_TYPE.GRADE_TYPE_CODE%type
,p_MODIFIED_DATE in GRADE_TYPE.MODIFIED_DATE%type
) is
begin
update GRADE_TYPE set
CREATED_BY = p_CREATED_BY
,MODIFIED_BY = p_MODIFIED_BY
,DESCRIPTION = p_DESCRIPTION
,CREATED_DATE = p_CREATED_DATE
,MODIFIED_DATE = p_MODIFIED_DATE
where SCHOOL_ID = p_SCHOOL_ID and GRADE_TYPE_CODE = p_GRADE_TYPE_CODE;
end;
-- del
procedure del (
p_SCHOOL_ID in GRADE_TYPE.SCHOOL_ID%type
,p_GRADE_TYPE_CODE in GRADE_TYPE.GRADE_TYPE_CODE%type
) is
begin
delete from GRADE_TYPE
where SCHOOL_ID = p_SCHOOL_ID and GRADE_TYPE_CODE = p_GRADE_TYPE_CODE;
end;
end PKG_GRADE_TYPE;

/
--------------------------------------------------------
--  DDL for Package Body PKG_GRADE_TYPE_WEIGHT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PKG_GRADE_TYPE_WEIGHT" 
is
-- insert
procedure ins (
p_CREATED_BY in GRADE_TYPE_WEIGHT.CREATED_BY%type
,p_MODIFIED_BY in GRADE_TYPE_WEIGHT.MODIFIED_BY%type
,p_CREATED_DATE in GRADE_TYPE_WEIGHT.CREATED_DATE%type
,p_PERCENT_OF_FINAL_GRADE in GRADE_TYPE_WEIGHT.PERCENT_OF_FINAL_GRADE%type
,p_DROP_LOWEST in GRADE_TYPE_WEIGHT.DROP_LOWEST%type
,p_SCHOOL_ID in GRADE_TYPE_WEIGHT.SCHOOL_ID%type
,p_GRADE_TYPE_CODE in GRADE_TYPE_WEIGHT.GRADE_TYPE_CODE%type
,p_NUMBER_PER_SECTION in GRADE_TYPE_WEIGHT.NUMBER_PER_SECTION%type
,p_SECTION_ID in GRADE_TYPE_WEIGHT.SECTION_ID%type
,p_MODIFIED_DATE in GRADE_TYPE_WEIGHT.MODIFIED_DATE%type
) is
begin
insert into GRADE_TYPE_WEIGHT(
CREATED_BY
,MODIFIED_BY
,CREATED_DATE
,PERCENT_OF_FINAL_GRADE
,DROP_LOWEST
,SCHOOL_ID
,GRADE_TYPE_CODE
,NUMBER_PER_SECTION
,SECTION_ID
,MODIFIED_DATE
) values (
p_CREATED_BY
,p_MODIFIED_BY
,p_CREATED_DATE
,p_PERCENT_OF_FINAL_GRADE
,p_DROP_LOWEST
,p_SCHOOL_ID
,p_GRADE_TYPE_CODE
,p_NUMBER_PER_SECTION
,p_SECTION_ID
,p_MODIFIED_DATE
);end;
-- update
procedure upd (
p_CREATED_BY in GRADE_TYPE_WEIGHT.CREATED_BY%type
,p_MODIFIED_BY in GRADE_TYPE_WEIGHT.MODIFIED_BY%type
,p_CREATED_DATE in GRADE_TYPE_WEIGHT.CREATED_DATE%type
,p_PERCENT_OF_FINAL_GRADE in GRADE_TYPE_WEIGHT.PERCENT_OF_FINAL_GRADE%type
,p_DROP_LOWEST in GRADE_TYPE_WEIGHT.DROP_LOWEST%type
,p_SCHOOL_ID in GRADE_TYPE_WEIGHT.SCHOOL_ID%type
,p_GRADE_TYPE_CODE in GRADE_TYPE_WEIGHT.GRADE_TYPE_CODE%type
,p_NUMBER_PER_SECTION in GRADE_TYPE_WEIGHT.NUMBER_PER_SECTION%type
,p_SECTION_ID in GRADE_TYPE_WEIGHT.SECTION_ID%type
,p_MODIFIED_DATE in GRADE_TYPE_WEIGHT.MODIFIED_DATE%type
) is
begin
update GRADE_TYPE_WEIGHT set
CREATED_BY = p_CREATED_BY
,MODIFIED_BY = p_MODIFIED_BY
,CREATED_DATE = p_CREATED_DATE
,PERCENT_OF_FINAL_GRADE = p_PERCENT_OF_FINAL_GRADE
,DROP_LOWEST = p_DROP_LOWEST
,NUMBER_PER_SECTION = p_NUMBER_PER_SECTION
,MODIFIED_DATE = p_MODIFIED_DATE
where SCHOOL_ID = p_SCHOOL_ID and SECTION_ID = p_SECTION_ID and GRADE_TYPE_CODE = p_GRADE_TYPE_CODE;
end;
-- del
procedure del (
p_SCHOOL_ID in GRADE_TYPE_WEIGHT.SCHOOL_ID%type
,p_SECTION_ID in GRADE_TYPE_WEIGHT.SECTION_ID%type
,p_GRADE_TYPE_CODE in GRADE_TYPE_WEIGHT.GRADE_TYPE_CODE%type
) is
begin
delete from GRADE_TYPE_WEIGHT
where SCHOOL_ID = p_SCHOOL_ID and SECTION_ID = p_SECTION_ID and GRADE_TYPE_CODE = p_GRADE_TYPE_CODE;
end;
end PKG_GRADE_TYPE_WEIGHT;

/
--------------------------------------------------------
--  DDL for Package Body PKG_INSTRUCTOR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PKG_INSTRUCTOR" 
is
-- insert
procedure ins (
p_ZIP in INSTRUCTOR.ZIP%type
,p_CREATED_BY in INSTRUCTOR.CREATED_BY%type
,p_MODIFIED_BY in INSTRUCTOR.MODIFIED_BY%type
,p_SALUTATION in INSTRUCTOR.SALUTATION%type default null 
,p_CREATED_DATE in INSTRUCTOR.CREATED_DATE%type
,p_PHONE in INSTRUCTOR.PHONE%type default null 
,p_INSTRUCTOR_ID in INSTRUCTOR.INSTRUCTOR_ID%type
,p_LAST_NAME in INSTRUCTOR.LAST_NAME%type
,p_STREET_ADDRESS in INSTRUCTOR.STREET_ADDRESS%type
,p_SCHOOL_ID in INSTRUCTOR.SCHOOL_ID%type
,p_FIRST_NAME in INSTRUCTOR.FIRST_NAME%type
,p_MODIFIED_DATE in INSTRUCTOR.MODIFIED_DATE%type
) is
begin
insert into INSTRUCTOR(
ZIP
,CREATED_BY
,MODIFIED_BY
,SALUTATION
,CREATED_DATE
,PHONE
,INSTRUCTOR_ID
,LAST_NAME
,STREET_ADDRESS
,SCHOOL_ID
,FIRST_NAME
,MODIFIED_DATE
) values (
p_ZIP
,p_CREATED_BY
,p_MODIFIED_BY
,p_SALUTATION
,p_CREATED_DATE
,p_PHONE
,p_INSTRUCTOR_ID
,p_LAST_NAME
,p_STREET_ADDRESS
,p_SCHOOL_ID
,p_FIRST_NAME
,p_MODIFIED_DATE
);end;
-- update
procedure upd (
p_ZIP in INSTRUCTOR.ZIP%type
,p_CREATED_BY in INSTRUCTOR.CREATED_BY%type
,p_MODIFIED_BY in INSTRUCTOR.MODIFIED_BY%type
,p_SALUTATION in INSTRUCTOR.SALUTATION%type default null 
,p_CREATED_DATE in INSTRUCTOR.CREATED_DATE%type
,p_PHONE in INSTRUCTOR.PHONE%type default null 
,p_INSTRUCTOR_ID in INSTRUCTOR.INSTRUCTOR_ID%type
,p_LAST_NAME in INSTRUCTOR.LAST_NAME%type
,p_STREET_ADDRESS in INSTRUCTOR.STREET_ADDRESS%type
,p_SCHOOL_ID in INSTRUCTOR.SCHOOL_ID%type
,p_FIRST_NAME in INSTRUCTOR.FIRST_NAME%type
,p_MODIFIED_DATE in INSTRUCTOR.MODIFIED_DATE%type
) is
begin
update INSTRUCTOR set
ZIP = p_ZIP
,CREATED_BY = p_CREATED_BY
,MODIFIED_BY = p_MODIFIED_BY
,SALUTATION = p_SALUTATION
,CREATED_DATE = p_CREATED_DATE
,PHONE = p_PHONE
,LAST_NAME = p_LAST_NAME
,STREET_ADDRESS = p_STREET_ADDRESS
,FIRST_NAME = p_FIRST_NAME
,MODIFIED_DATE = p_MODIFIED_DATE
where INSTRUCTOR_ID = p_INSTRUCTOR_ID and SCHOOL_ID = p_SCHOOL_ID;
end;
-- del
procedure del (
p_INSTRUCTOR_ID in INSTRUCTOR.INSTRUCTOR_ID%type
,p_SCHOOL_ID in INSTRUCTOR.SCHOOL_ID%type
) is
begin
delete from INSTRUCTOR
where INSTRUCTOR_ID = p_INSTRUCTOR_ID and SCHOOL_ID = p_SCHOOL_ID;
end;
end PKG_INSTRUCTOR;

/
--------------------------------------------------------
--  DDL for Package Body PKG_SCHOOL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PKG_SCHOOL" 
is
-- insert
procedure ins (
p_SCHOOL_NAME in SCHOOL.SCHOOL_NAME%type
,p_CREATED_BY in SCHOOL.CREATED_BY%type
,p_MODIFIED_BY in SCHOOL.MODIFIED_BY%type
,p_CREATED_DATE in SCHOOL.CREATED_DATE%type
,p_SCHOOL_ID in SCHOOL.SCHOOL_ID%type
,p_MODIFIED_DATE in SCHOOL.MODIFIED_DATE%type
) is
begin
insert into SCHOOL(
SCHOOL_NAME
,CREATED_BY
,MODIFIED_BY
,CREATED_DATE
,SCHOOL_ID
,MODIFIED_DATE
) values (
p_SCHOOL_NAME
,p_CREATED_BY
,p_MODIFIED_BY
,p_CREATED_DATE
,p_SCHOOL_ID
,p_MODIFIED_DATE
);end;
-- update
procedure upd (
p_SCHOOL_NAME in SCHOOL.SCHOOL_NAME%type
,p_CREATED_BY in SCHOOL.CREATED_BY%type
,p_MODIFIED_BY in SCHOOL.MODIFIED_BY%type
,p_CREATED_DATE in SCHOOL.CREATED_DATE%type
,p_SCHOOL_ID in SCHOOL.SCHOOL_ID%type
,p_MODIFIED_DATE in SCHOOL.MODIFIED_DATE%type
) is
begin
update SCHOOL set
SCHOOL_NAME = p_SCHOOL_NAME
,CREATED_BY = p_CREATED_BY
,MODIFIED_BY = p_MODIFIED_BY
,CREATED_DATE = p_CREATED_DATE
,MODIFIED_DATE = p_MODIFIED_DATE
where SCHOOL_ID = p_SCHOOL_ID;
end;
-- del
procedure del (
p_SCHOOL_ID in SCHOOL.SCHOOL_ID%type
) is
begin
delete from SCHOOL
where SCHOOL_ID = p_SCHOOL_ID;
end;
end PKG_SCHOOL;

/
--------------------------------------------------------
--  DDL for Package Body PKG_SECTION
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PKG_SECTION" 
is
-- insert
procedure ins (
p_SECTION_NO in SECTION.SECTION_NO%type
,p_LOCATION in SECTION.LOCATION%type default null 
,p_CREATED_BY in SECTION.CREATED_BY%type
,p_CAPACITY in SECTION.CAPACITY%type default null 
,p_COURSE_NO in SECTION.COURSE_NO%type
,p_MODIFIED_BY in SECTION.MODIFIED_BY%type
,p_CREATED_DATE in SECTION.CREATED_DATE%type
,p_START_DATE_TIME in SECTION.START_DATE_TIME%type default null 
,p_INSTRUCTOR_ID in SECTION.INSTRUCTOR_ID%type
,p_SCHOOL_ID in SECTION.SCHOOL_ID%type
,p_SECTION_ID in SECTION.SECTION_ID%type
,p_MODIFIED_DATE in SECTION.MODIFIED_DATE%type
) is
begin
insert into SECTION(
SECTION_NO
,LOCATION
,CREATED_BY
,CAPACITY
,COURSE_NO
,MODIFIED_BY
,CREATED_DATE
,START_DATE_TIME
,INSTRUCTOR_ID
,SCHOOL_ID
,SECTION_ID
,MODIFIED_DATE
) values (
p_SECTION_NO
,p_LOCATION
,p_CREATED_BY
,p_CAPACITY
,p_COURSE_NO
,p_MODIFIED_BY
,p_CREATED_DATE
,p_START_DATE_TIME
,p_INSTRUCTOR_ID
,p_SCHOOL_ID
,p_SECTION_ID
,p_MODIFIED_DATE
);end;
-- update
procedure upd (
p_SECTION_NO in SECTION.SECTION_NO%type
,p_LOCATION in SECTION.LOCATION%type default null 
,p_CREATED_BY in SECTION.CREATED_BY%type
,p_CAPACITY in SECTION.CAPACITY%type default null 
,p_COURSE_NO in SECTION.COURSE_NO%type
,p_MODIFIED_BY in SECTION.MODIFIED_BY%type
,p_CREATED_DATE in SECTION.CREATED_DATE%type
,p_START_DATE_TIME in SECTION.START_DATE_TIME%type default null 
,p_INSTRUCTOR_ID in SECTION.INSTRUCTOR_ID%type
,p_SCHOOL_ID in SECTION.SCHOOL_ID%type
,p_SECTION_ID in SECTION.SECTION_ID%type
,p_MODIFIED_DATE in SECTION.MODIFIED_DATE%type
) is
begin
update SECTION set
LOCATION = p_LOCATION
,CREATED_BY = p_CREATED_BY
,CAPACITY = p_CAPACITY
,MODIFIED_BY = p_MODIFIED_BY
,CREATED_DATE = p_CREATED_DATE
,START_DATE_TIME = p_START_DATE_TIME
,INSTRUCTOR_ID = p_INSTRUCTOR_ID
,SCHOOL_ID = p_SCHOOL_ID
,SECTION_ID = p_SECTION_ID
,MODIFIED_DATE = p_MODIFIED_DATE
where SECTION_NO = p_SECTION_NO and COURSE_NO = p_COURSE_NO;
end;
-- del
procedure del (
p_SECTION_NO in SECTION.SECTION_NO%type
,p_COURSE_NO in SECTION.COURSE_NO%type
) is
begin
delete from SECTION
where SECTION_NO = p_SECTION_NO and COURSE_NO = p_COURSE_NO;
end;
end PKG_SECTION;

/
--------------------------------------------------------
--  DDL for Package Body PKG_STUDENT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PKG_STUDENT" 
is
-- insert
procedure ins (
p_ZIP in STUDENT.ZIP%type
,p_CREATED_BY in STUDENT.CREATED_BY%type
,p_MODIFIED_BY in STUDENT.MODIFIED_BY%type
,p_CREATED_DATE in STUDENT.CREATED_DATE%type
,p_PHONE in STUDENT.PHONE%type default null 
,p_LAST_NAME in STUDENT.LAST_NAME%type
,p_SCHOOL_ID in STUDENT.SCHOOL_ID%type
,p_FIRST_NAME in STUDENT.FIRST_NAME%type default null 
,p_MODIFIED_DATE in STUDENT.MODIFIED_DATE%type
,p_EMPLOYER in STUDENT.EMPLOYER%type default null 
,p_SALUTATION in STUDENT.SALUTATION%type default null 
,p_STREET_ADDRESS in STUDENT.STREET_ADDRESS%type default null 
,p_REGISTRATION_DATE in STUDENT.REGISTRATION_DATE%type
,p_STUDENT_ID in STUDENT.STUDENT_ID%type
) is
begin
insert into STUDENT(
ZIP
,CREATED_BY
,MODIFIED_BY
,CREATED_DATE
,PHONE
,LAST_NAME
,SCHOOL_ID
,FIRST_NAME
,MODIFIED_DATE
,EMPLOYER
,SALUTATION
,STREET_ADDRESS
,REGISTRATION_DATE
,STUDENT_ID
) values (
p_ZIP
,p_CREATED_BY
,p_MODIFIED_BY
,p_CREATED_DATE
,p_PHONE
,p_LAST_NAME
,p_SCHOOL_ID
,p_FIRST_NAME
,p_MODIFIED_DATE
,p_EMPLOYER
,p_SALUTATION
,p_STREET_ADDRESS
,p_REGISTRATION_DATE
,p_STUDENT_ID
);end;
-- update
procedure upd (
p_ZIP in STUDENT.ZIP%type
,p_CREATED_BY in STUDENT.CREATED_BY%type
,p_MODIFIED_BY in STUDENT.MODIFIED_BY%type
,p_CREATED_DATE in STUDENT.CREATED_DATE%type
,p_PHONE in STUDENT.PHONE%type default null 
,p_LAST_NAME in STUDENT.LAST_NAME%type
,p_SCHOOL_ID in STUDENT.SCHOOL_ID%type
,p_FIRST_NAME in STUDENT.FIRST_NAME%type default null 
,p_MODIFIED_DATE in STUDENT.MODIFIED_DATE%type
,p_EMPLOYER in STUDENT.EMPLOYER%type default null 
,p_SALUTATION in STUDENT.SALUTATION%type default null 
,p_STREET_ADDRESS in STUDENT.STREET_ADDRESS%type default null 
,p_REGISTRATION_DATE in STUDENT.REGISTRATION_DATE%type
,p_STUDENT_ID in STUDENT.STUDENT_ID%type
) is
begin
update STUDENT set
ZIP = p_ZIP
,CREATED_BY = p_CREATED_BY
,MODIFIED_BY = p_MODIFIED_BY
,CREATED_DATE = p_CREATED_DATE
,PHONE = p_PHONE
,LAST_NAME = p_LAST_NAME
,FIRST_NAME = p_FIRST_NAME
,MODIFIED_DATE = p_MODIFIED_DATE
,EMPLOYER = p_EMPLOYER
,SALUTATION = p_SALUTATION
,STREET_ADDRESS = p_STREET_ADDRESS
,REGISTRATION_DATE = p_REGISTRATION_DATE
where STUDENT_ID = p_STUDENT_ID and SCHOOL_ID = p_SCHOOL_ID;
end;
-- del
procedure del (
p_STUDENT_ID in STUDENT.STUDENT_ID%type
,p_SCHOOL_ID in STUDENT.SCHOOL_ID%type
) is
begin
delete from STUDENT
where STUDENT_ID = p_STUDENT_ID and SCHOOL_ID = p_SCHOOL_ID;
end;
end PKG_STUDENT;

/
--------------------------------------------------------
--  DDL for Package Body PKG_ZIPCODE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PKG_ZIPCODE" 
is
-- insert
procedure ins (
p_ZIP in ZIPCODE.ZIP%type
,p_CREATED_BY in ZIPCODE.CREATED_BY%type
,p_CITY in ZIPCODE.CITY%type default null 
,p_MODIFIED_BY in ZIPCODE.MODIFIED_BY%type
,p_CREATED_DATE in ZIPCODE.CREATED_DATE%type
,p_STATE in ZIPCODE.STATE%type default null 
,p_MODIFIED_DATE in ZIPCODE.MODIFIED_DATE%type
) is
begin
insert into ZIPCODE(
ZIP
,CREATED_BY
,CITY
,MODIFIED_BY
,CREATED_DATE
,STATE
,MODIFIED_DATE
) values (
p_ZIP
,p_CREATED_BY
,p_CITY
,p_MODIFIED_BY
,p_CREATED_DATE
,p_STATE
,p_MODIFIED_DATE
);end;
-- update
procedure upd (
p_ZIP in ZIPCODE.ZIP%type
,p_CREATED_BY in ZIPCODE.CREATED_BY%type
,p_CITY in ZIPCODE.CITY%type default null 
,p_MODIFIED_BY in ZIPCODE.MODIFIED_BY%type
,p_CREATED_DATE in ZIPCODE.CREATED_DATE%type
,p_STATE in ZIPCODE.STATE%type default null 
,p_MODIFIED_DATE in ZIPCODE.MODIFIED_DATE%type
) is
begin
update ZIPCODE set
CREATED_BY = p_CREATED_BY
,CITY = p_CITY
,MODIFIED_BY = p_MODIFIED_BY
,CREATED_DATE = p_CREATED_DATE
,STATE = p_STATE
,MODIFIED_DATE = p_MODIFIED_DATE
where ZIP = p_ZIP;
end;
-- del
procedure del (
p_ZIP in ZIPCODE.ZIP%type
) is
begin
delete from ZIPCODE
where ZIP = p_ZIP;
end;
end PKG_ZIPCODE;

/

----------------Insert Data here by running the script PS4-FullData.sql

--Create / set the instructor sequence.
 CREATE SEQUENCE  "INSTRUCTOR_SEQ"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 
 START WITH 111 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;


--------------------------------------------------------
--  File created - Tuesday-March-15-2022   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Trigger TRG01_INSTRUCTOR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG01_INSTRUCTOR" 
BEFORE INSERT ON INSTRUCTOR 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING THEN
      SELECT INSTRUCTOR_SEQ.NEXTVAL INTO :NEW.INSTRUCTOR_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "TRG01_INSTRUCTOR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG02_INSTRUCTOR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG02_INSTRUCTOR" BEFORE
    INSERT or UPDATE ON INSTRUCTOR
    FOR EACH ROW
BEGIN
    IF inserting THEN
        :new.created_by := user;
        :new.created_date := sysdate;
    END IF;
    :new.modified_by := user;
    :new.modified_date := sysdate;
END;

/
ALTER TRIGGER "TRG02_INSTRUCTOR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG02_GRADE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG02_GRADE" BEFORE
    INSERT or UPDATE ON GRADE
    FOR EACH ROW
BEGIN
    IF inserting THEN
        :new.created_by := user;
        :new.created_date := sysdate;
    END IF;
    :new.modified_by := user;
    :new.modified_date := sysdate;
END;

/
ALTER TRIGGER "TRG02_GRADE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG02_GRADE_CONVERSION
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG02_GRADE_CONVERSION" BEFORE
    INSERT or UPDATE ON GRADE_CONVERSION
    FOR EACH ROW
BEGIN
    IF inserting THEN
        :new.created_by := user;
        :new.created_date := sysdate;
    END IF;
    :new.modified_by := user;
    :new.modified_date := sysdate;
END;

/
ALTER TRIGGER "TRG02_GRADE_CONVERSION" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG02_GRADE_TYPE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG02_GRADE_TYPE" BEFORE
    INSERT or UPDATE ON GRADE_TYPE
    FOR EACH ROW
BEGIN
    IF inserting THEN
        :new.created_by := user;
        :new.created_date := sysdate;
    END IF;
    :new.modified_by := user;
    :new.modified_date := sysdate;
END;

/
ALTER TRIGGER "TRG02_GRADE_TYPE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG02_GRADE_TYPE_WEIGHT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG02_GRADE_TYPE_WEIGHT" BEFORE
    INSERT or UPDATE ON GRADE_TYPE_WEIGHT
    FOR EACH ROW
BEGIN
    IF inserting THEN
        :new.created_by := user;
        :new.created_date := sysdate;
    END IF;
    :new.modified_by := user;
    :new.modified_date := sysdate;
END;

/
ALTER TRIGGER "TRG02_GRADE_TYPE_WEIGHT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG02_SCHOOL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG02_SCHOOL" BEFORE
    INSERT or UPDATE ON SCHOOL
    FOR EACH ROW
BEGIN
    IF inserting THEN
        :new.created_by := user;
        :new.created_date := sysdate;
    END IF;
    :new.modified_by := user;
    :new.modified_date := sysdate;
END;

/
ALTER TRIGGER "TRG02_SCHOOL" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG02_ZIPCODE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG02_ZIPCODE" BEFORE
    INSERT or UPDATE ON ZIPCODE
    FOR EACH ROW
BEGIN
    IF inserting THEN
        :new.created_by := user;
        :new.created_date := sysdate;
    END IF;
    :new.modified_by := user;
    :new.modified_date := sysdate;
END;

/
ALTER TRIGGER "TRG02_ZIPCODE" ENABLE;
